import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  runApp(MaterialApp(debugShowCheckedModeBanner: false, home: AuthGate()));
}

/// ----------------------
/// AUTHENTICATION SCREEN
/// ----------------------
class AuthGate extends StatefulWidget {
  @override
  _AuthGateState createState() => _AuthGateState();
}

class _AuthGateState extends State<AuthGate> {
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  bool isLogin = true;

  Future<void> _authenticate() async {
    try {
      if (isLogin) {
        await FirebaseAuth.instance.signInWithEmailAndPassword(
            email: _emailController.text.trim(),
            password: _passwordController.text.trim());
      } else {
        await FirebaseAuth.instance.createUserWithEmailAndPassword(
            email: _emailController.text.trim(),
            password: _passwordController.text.trim());
      }
    } catch (e) {
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text("Error: $e")));
    }
  }

  @override
  Widget build(BuildContext context) {
    return StreamBuilder<User?>(
        stream: FirebaseAuth.instance.authStateChanges(),
        builder: (context, snapshot) {
          if (snapshot.hasData) {
            // If email is admin@example.com, go to admin screen
            if (snapshot.data!.email == "admin@example.com") {
              return AdminScreen();
            }
            return UserScreen();
          }

          return Scaffold(
            appBar: AppBar(title: Text(isLogin ? "Login" : "Sign Up")),
            body: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                children: [
                  TextField(
                    controller: _emailController,
                    decoration: InputDecoration(labelText: "Email"),
                  ),
                  SizedBox(height: 10),
                  TextField(
                    controller: _passwordController,
                    decoration: InputDecoration(labelText: "Password"),
                    obscureText: true,
                  ),
                  SizedBox(height: 20),
                  ElevatedButton(
                    onPressed: _authenticate,
                    child: Text(isLogin ? "Login" : "Sign Up"),
                  ),
                  TextButton(
                      onPressed: () {
                        setState(() {
                          isLogin = !isLogin;
                        });
                      },
                      child: Text(isLogin
                          ? "Don't have an account? Sign Up"
                          : "Already have an account? Login")),
                ],
              ),
            ),
          );
        });
  }
}

/// ----------------------
/// USER SCREEN
/// ----------------------
class UserScreen extends StatefulWidget {
  @override
  _UserScreenState createState() => _UserScreenState();
}

class _UserScreenState extends State<UserScreen> {
  final _cakeController = TextEditingController();
  String _cakeSize = "Small";
  final CollectionReference ordersCollection =
      FirebaseFirestore.instance.collection("orders");

  Future<void> _placeOrder() async {
    final user = FirebaseAuth.instance.currentUser;
    if (_cakeController.text.isEmpty) return;

    await ordersCollection.add({
      "userId": user!.uid,
      "userEmail": user.email,
      "cake": _cakeController.text,
      "size": _cakeSize,
      "status": "Pending",
      "timestamp": Timestamp.now(),
    });

    ScaffoldMessenger.of(context)
        .showSnackBar(SnackBar(content: Text("Order Placed!")));
    _cakeController.clear();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Place Cake Order"),
        actions: [
          IconButton(
              icon: Icon(Icons.logout),
              onPressed: () => FirebaseAuth.instance.signOut())
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: _cakeController,
              decoration: InputDecoration(
                  labelText: "Cake Name", border: OutlineInputBorder()),
            ),
            SizedBox(height: 10),
            DropdownButton<String>(
              value: _cakeSize,
              items: ["Small", "Medium", "Large"]
                  .map((size) => DropdownMenuItem(
                        value: size,
                        child: Text(size),
                      ))
                  .toList(),
              onChanged: (value) {
                setState(() {
                  _cakeSize = value!;
                });
              },
            ),
            SizedBox(height: 20),
            ElevatedButton(onPressed: _placeOrder, child: Text("Place Order"))
          ],
        ),
      ),
    );
  }
}

/// ----------------------
/// ADMIN SCREEN
/// ----------------------
class AdminScreen extends StatelessWidget {
  final CollectionReference ordersCollection =
      FirebaseFirestore.instance.collection("orders");

  Future<void> _updateStatus(String docId, String status) async {
    await ordersCollection.doc(docId).update({"status": status});
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Admin Panel"),
        actions: [
          IconButton(
              icon: Icon(Icons.logout),
              onPressed: () => FirebaseAuth.instance.signOut())
        ],
      ),
      body: StreamBuilder<QuerySnapshot>(
        stream: ordersCollection.orderBy("timestamp", descending: true).snapshots(),
        builder: (context, snapshot) {
          if (!snapshot.hasData) return Center(child: CircularProgressIndicator());
          final orders = snapshot.data!.docs;
          if (orders.isEmpty) return Center(child: Text("No Orders Yet"));
          return ListView.builder(
            itemCount: orders.length,
            itemBuilder: (context, index) {
              final order = orders[index];
              final data = order.data() as Map<String, dynamic>;
              return Card(
                margin: EdgeInsets.symmetric(horizontal: 10, vertical: 5),
                child: ListTile(
                  title: Text("${data["cake"]} (${data["size"]})"),
                  subtitle: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text("User: ${data["userEmail"]}"),
                        Text("Status: ${data["status"]}")
                      ]),
                  trailing: PopupMenuButton<String>(
                    onSelected: (value) => _updateStatus(order.id, value),
                    itemBuilder: (_) => ["Pending", "Processing", "Completed"]
                        .map((status) => PopupMenuItem(
                              value: status,
                              child: Text(status),
                            ))
                        .toList(),
                    icon: Icon(Icons.edit),
                  ),
                ),
              );
            },
          );
        },
      ),
    );
  }
}
